"""User interaction handlers (commands, quiz, callbacks)."""
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters


from create_bot import application
from keyboards.client_kb import MAIN_MENU, TEST_CONFIRM, answer_kb, trainer_kb
from data.questions import QUESTIONS, VARIANTS, CORRECT


import random
import re
#import feedparser
from deep_translator import GoogleTranslator
import urllib.request
import xml.etree.ElementTree as ET
import ssl
import certifi  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install certifi




PROPOSAL_INCORRECT = [
   ['lost','my','somewhere','I','keys','house','the','in'],
   ['the','Please','door','close','quietly'],
   ['slept','The','cat','on','windowsill','the'],
   ['in','soccer','played','the','They','schoolyard'],
   ['cafe','my','forgot','at','I','umbrella','the'],
   ['jumped','The','cat','the','onto','windowsill'],
   ['when','saw','He','old','friend','smiled','he','his']
]
PROPOSAL_CORRECT = [
   ['I','lost','my','keys','somewhere','in','the','house'],
   ['Please','close','the','door','quietly'],
   ['The','cat','slept','on','the','windowsill'],
   ['They','played','soccer','in','the','schoolyard'],
   ['I','forgot','my','umbrella','at','the','cafe'],
   ['The','cat','jumped','onto','the','windowsill'],
   ['He','smiled','when','he','saw','his','old','friend']
]
NEW_WORDS = [
   "apple - —è–±–ª–æ–∫–æ","book-–∫–Ω–∏–≥–∞","walk-–≥—É–ª—è—Ç—å",
   "cucumber-–æ–≥—É—Ä–µ—Ü","eggplant-–±–∞–∫–ª–∞–∂–∞–Ω"
]


#translate the words from en->ru and from ru->en
def translate_text(text:str)->str:
   is_eng = bool(re.search(r"[A-Za-z]",text))
   src,tgt =("en","ru") if is_eng else ("ru","en")
   try:
       return GoogleTranslator(source=src,target=tgt).translate(text)
   except Exception:
       return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
  




def get_news_text(limit: int = 3) -> str:
   url = "https://feeds.bbci.co.uk/news/rss.xml"
   headers = {"User-Agent": "Mozilla/5.0"}
   req = urllib.request.Request(url, headers=headers)


   # –°–æ–∑–¥–∞—ë–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
   context = ssl.create_default_context(cafile=certifi.where())


   try:
       with urllib.request.urlopen(req, context=context, timeout=10) as response:
           xml_data = response.read()
   except Exception as e:
       return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"


   try:
       root = ET.fromstring(xml_data)
       items = root.findall("./channel/item")
       if not items:
           return "‚ö†Ô∏è –õ–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞."


       news_items = []
       for item in items[:limit]:
           title = item.findtext("title", default="(–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")
           link = item.findtext("link", default="")
           news_items.append(f"üîπ <b>{title}</b>\n{link}")


       return "\n\n".join(news_items)


   except Exception as e:
       return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML: {e}"




# Helper to register handlers automatically on import
def register_handlers():
   application.add_handler(CommandHandler(['start', 'help'], start))
   application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_router))
   application.add_handler(CallbackQueryHandler(answer_callback, pattern='^(right|wrong)$'))


# ---- Handlers ----


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
   await update.message.reply_text(
       "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
       reply_markup=MAIN_MENU
   )


async def menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
   text = update.message.text
   if text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù":
       await update.message.reply_text(
           "–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤. –ì–æ—Ç–æ–≤?", reply_markup=TEST_CONFIRM
       )
   elif text == "–î–∞":
       context.user_data['score'] = 0
       context.user_data['idx'] = 0
       await send_question(update, context, 0)
   elif text in {"–ù–µ—Ç", "–ù–∞–∑–∞–¥ ‚óÄÔ∏è"}:
       await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=MAIN_MENU)
   elif text == "–¢—Ä–µ–Ω–∞–∂—ë—Ä üèãüèº":
       await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞", reply_markup=trainer_kb)
   elif text == "–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ":
       word = random.choice(NEW_WORDS)
       await update.message.reply_text(f"–°–ª–æ–≤–æ –¥–Ω—è:\n<b>{word}</b>",parse_mode=ParseMode.HTML)
   elif text == "–°–æ–±–µ—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
       idx = random.randint(0,len(PROPOSAL_INCORRECT)-1)
       words = PROPOSAL_INCORRECT[idx]
       context.user_data["translate_idx"] = idx
       context.user_data["translate_attempt"] = 0
       await update.message.reply_text(
           f"–°–æ–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤:\n<code>{' '.join(words)}</code>",
           parse_mode=ParseMode.HTML
       )
   elif context.user_data.get("translate_idx") is not None:
       idx = context.user_data["translate_idx"]
       attempt = update.message.text.strip().split()
       correct = PROPOSAL_CORRECT[idx]
       if attempt == correct:
           await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!",reply_markup=trainer_kb)
           context.user_data["translate_idx"] = None
       else:
           context.user_data["translate_attempt"]+=1
           await update.message.reply_text("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
   elif text == "–ù–æ–≤–æ—Å—Ç–∏ üì∞":
       news = get_news_text()
       from telegram.helpers import escape
       if news.startswith("‚ö†Ô∏è"):
           # –æ—à–∏–±–∫–∞: –≤—ã–≤–æ–¥–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
           await update.message.reply_text(news)
       else:
           await update.message.reply_text(
               f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n{escape(news)}",
               parse_mode=ParseMode.HTML,
               disable_web_page_preview=True
           )


   elif text == "–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞":
       context.user_data["translation_mode"]=True
       await update.message.reply_text(
           "–û—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
           "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏ \"H–∞–∑–∞–¥\".",
           reply_markup = MAIN_MENU
       )
   elif context.user_data.get("translation_mode"):
       result = translate_text(text)
       await update.message.reply_text(f"->{result}")
   elif text == "–ù–∞–∑–∞–¥ ‚óÄÔ∏è":
       await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=MAIN_MENU)
   else:
       await update.message.reply_text("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üôÇ", reply_markup=MAIN_MENU)


async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int) -> None:
   if idx < len(QUESTIONS):
       await update.effective_chat.send_message(
           QUESTIONS[idx],
           reply_markup=answer_kb(VARIANTS[idx], CORRECT[idx])
       )
   else:
       score = context.user_data.get('score', 0)
       if score <= 1:
           level = 'Elementary'
       elif score <= 3:
           level = 'Intermediate'
       else:
           level = 'Advanced'


       await update.effective_chat.send_message(
           f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n<b>{score}/{len(QUESTIONS)}</b> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
           f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>{level}</b>",
           parse_mode=ParseMode.HTML,
           reply_markup=MAIN_MENU
       )


async def answer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
   query = update.callback_query
   await query.answer()


   idx = context.user_data.get('idx', 0)
   if query.data == 'right':
       context.user_data['score'] = context.user_data.get('score', 0) + 1
   context.user_data['idx'] = idx + 1


   # edit original message to show tick/cross
   mark = "‚úÖ" if query.data == 'right' else "‚ùå"
   await query.edit_message_reply_markup(reply_markup=None)
   await query.edit_message_text(f"{mark} {query.message.text}")


   await send_question(update, context, context.user_data['idx'])


# Register handlers at import time
register_handlers()
